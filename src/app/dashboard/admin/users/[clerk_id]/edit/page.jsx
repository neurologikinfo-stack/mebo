"use client"; import { useParams, useRouter } from "next/navigation"; import { useState, useEffect } from "react"; import useUserByClerkId from "@/hooks/useUserByClerkId"; export default function EditUserPage() { const params = useParams(); const clerk_id = params?.clerk_id; // ✅ acceso seguro const router = useRouter(); const { user, loading, error } = useUserByClerkId(clerk_id); const [form, setForm] = useState({ full_name: "", email: "", role: "", }); const [saving, setSaving] = useState(false); const [err, setErr] = useState(""); // Cargar datos iniciales en el formulario useEffect(() => { if (user) { setForm({ full_name: user.full_name || "", email: user.email || "", role: user.role || "user", }); } }, [user]); async function handleSubmit(e) { e.preventDefault(); setSaving(true); setErr(""); try { const res = await fetch("/api/admin/update-user", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify({ clerk_id, full_name: form.full_name, email: form.email, role: form.role, }), }); const result = await res.json(); if (!res.ok || !result.success) { throw new Error(result.error || "No se pudo actualizar el usuario"); } // Redirigir de vuelta al detalle router.push(/dashboard/admin/users/${clerk_id}); } catch (err) { console.error("❌ Error actualizando usuario:", err); setErr(err.message); } finally { setSaving(false); } } if (loading) return <p className="p-6">⏳ Cargando...</p>; if (error) return <p className="p-6 text-red-500">❌ {error}</p>; if (!user) return <p className="p-6">Usuario no encontrado</p>; return ( <div className="p-6 space-y-6"> <h1 className="text-2xl font-bold">Editar usuario</h1> <form onSubmit={handleSubmit} className="space-y-4 max-w-lg"> <div> <label className="block text-sm font-medium">Nombre completo</label> <input type="text" value={form.full_name} onChange={(e) => setForm({ ...form, full_name: e.target.value })} className="mt-1 block w-full px-3 py-2 border rounded text-black" /> </div> <div> <label className="block text-sm font-medium">Email</label> <input type="email" value={form.email} onChange={(e) => setForm({ ...form, email: e.target.value })} className="mt-1 block w-full px-3 py-2 border rounded text-black" /> </div> <div> <label className="block text-sm font-medium">Rol</label> <select value={form.role} onChange={(e) => setForm({ ...form, role: e.target.value })} className="mt-1 block w-full px-3 py-2 border rounded text-black" > <option value="owner">Owner</option> <option value="customer">Customer</option> <option value="staff">Staff</option> <option value="user">User</option> <option value="admin">Admin</option> </select> </div> {err && <p className="text-red-500">{err}</p>} <button type="submit" disabled={saving} className="px-4 py-2 bg-blue-600 text-white rounded hover:bg-blue-700 transition" > {saving ? "Guardando..." : "Guardar cambios"} </button> </form> </div> ); }